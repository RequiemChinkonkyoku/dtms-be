// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DtmsDbContext))]
    [Migration("20250323030755_V1_AddSeedforDogDocument")]
    partial class V1_AddSeedforDogDocument
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MembershipPoints")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "ac908e5d3d5b4a53a3e5c17308f9309c",
                            Address = "Admin Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 603, DateTimeKind.Unspecified).AddTicks(9430), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin User",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 603, DateTimeKind.Unspecified).AddTicks(9430), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 0,
                            Password = "$2a$11$/Wg00FBYkdjJGtLdSlym2ehnArpqN/oP6xoeHBO0.SJDLkkuH1sQK",
                            PhoneNumber = "0123456789",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "f6f66051635d4be1ae994afca1664b33",
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = "2c5a23e6584e4129bae285cb63694681",
                            Address = "Trainer Member Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 719, DateTimeKind.Unspecified).AddTicks(2889), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_member@gmail.com",
                            FullName = "Trainer Member",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 719, DateTimeKind.Unspecified).AddTicks(2889), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 0,
                            Password = "$2a$11$OpCtM/oW6W/Tf8TakAP4B.XqTYHaOA8pmZIHBGyetBPfLrNIUeyoW",
                            PhoneNumber = "0987654321",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "4aca89ad500a4ccf88fc387fb3203eba",
                            Status = 1,
                            Username = "trainer_member"
                        },
                        new
                        {
                            Id = "bfe42d83023840efa405572cf451ed6b",
                            Address = "Trainer Lead Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 832, DateTimeKind.Unspecified).AddTicks(2405), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1983, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_lead@gmail.com",
                            FullName = "Trainer Lead",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 832, DateTimeKind.Unspecified).AddTicks(2405), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 0,
                            Password = "$2a$11$Ohx.1HM9.wYRuFjfgKGNPOSuEljf1Umf1YNuvMYzCeP/SrvNEc8q.",
                            PhoneNumber = "0911223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "9546c4a031e54038b1c0a1e91828db5c",
                            Status = 1,
                            Username = "trainer_lead"
                        },
                        new
                        {
                            Id = "30f3752615534f3e981932ebb53ab285",
                            Address = "Customer Individual Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 949, DateTimeKind.Unspecified).AddTicks(1764), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1995, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_individual@gmail.com",
                            FullName = "Customer Individual",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 53, 949, DateTimeKind.Unspecified).AddTicks(1764), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 100,
                            Password = "$2a$11$BB6TUwFgVihoOuR/L8QrKeWDBYBgCw4jra3wRlN6D.uo7CoUiMr4.",
                            PhoneNumber = "0988112233",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "db16396ac6b14e19aa314ed1bab402c8",
                            Status = 1,
                            Username = "customer_individual"
                        },
                        new
                        {
                            Id = "ac432bd246a74fb7ae3dd585c39144e8",
                            Address = "Customer Organization Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 63, DateTimeKind.Unspecified).AddTicks(549), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1992, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_organization@gmail.com",
                            FullName = "Customer Organization",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 63, DateTimeKind.Unspecified).AddTicks(549), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 200,
                            Password = "$2a$11$91iyesNbqtA4/7B72tiOZu1Sr0gqlOfwMWjG/1I1w9rmeMErF3u92",
                            PhoneNumber = "0977554433",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "961f548e2f214205b0ff0ab6028921ea",
                            Status = 1,
                            Username = "customer_organization"
                        },
                        new
                        {
                            Id = "215faf644c3c402d8312e9ea3369005b",
                            Address = "Staff Employee Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 181, DateTimeKind.Unspecified).AddTicks(8014), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1988, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_employee@gmail.com",
                            FullName = "Staff Employee",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 181, DateTimeKind.Unspecified).AddTicks(8014), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 0,
                            Password = "$2a$11$L6VMAbcwRe30EQuGPksmTOLh78dC.HDaYs0qFUkg36zMmiWsS4nv.",
                            PhoneNumber = "0966332211",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "7a9d724be0744dadbb70ee173af51278",
                            Status = 1,
                            Username = "staff_employee"
                        },
                        new
                        {
                            Id = "431753f94cc74affaabedd250e15a4de",
                            Address = "Staff Manager Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 300, DateTimeKind.Unspecified).AddTicks(2252), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_manager@gmail.com",
                            FullName = "Staff Manager",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 10, 7, 54, 300, DateTimeKind.Unspecified).AddTicks(2252), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "0383b1b8c4da4aeda3b15448582963a7",
                            MembershipPoints = 0,
                            Password = "$2a$11$Lhi4iVRTo.EA0/KovSb0N.Dv6NjkxfVBo.zm71WmTJ3TpXRKH/o6i",
                            PhoneNumber = "0955223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "e404ea5e9e534b48b0bd2b4802c6af3a",
                            Status = 1,
                            Username = "staff_manager"
                        });
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpiredOrUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountOtps");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("SlotId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = "1a5d57b63cb84fa69149f6f3c0e9c5a8",
                            Content = "Training your dog is crucial for a harmonious relationship between pet and owner...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "215faf644c3c402d8312e9ea3369005b",
                            Status = 1,
                            TimePublished = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Importance of Dog Training"
                        },
                        new
                        {
                            Id = "cea9eeb12d60485ba435cc4fc2fe811f",
                            Content = "Providing a balanced diet is essential for your dog's overall health and well-being...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "431753f94cc74affaabedd250e15a4de",
                            Status = 1,
                            TimePublished = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Understanding Canine Nutrition"
                        });
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageCategoryId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("CageCategories");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "91082895f4504e2b955ce19599c3ad94",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Covers fundamental obedience commands and essential skills.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "49dfbf47acc54e03bff603715a24d3b5",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Focuses on advanced obedience and specialized training techniques.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Advanced Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "3f3a3953e82348b49ec2466bdc3bc784",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addresses problem behaviors and corrective training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Modification",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssignedTrainerCount")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EnrolledDogCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartingDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedTrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxDogs")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrainers")
                        .HasColumnType("int");

                    b.Property<int>("MinDogs")
                        .HasColumnType("int");

                    b.Property<int>("MinTrainers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlotsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedTrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DogBreedId");

                    b.ToTable("CourseDogs");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseLessons");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerRoles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogBreedId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            Id = "f989df546cbb4e1fabe8367d9a659cae",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 5, 15),
                            DogBreedId = "34bd0db5cfea403e87a893e5d0bbdebb",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Bella",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "0999ddb2e73648faa29d16f33eea5ed0",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 8, 22),
                            DogBreedId = "949c8566c6ed43a39663b92651ad281c",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rocky",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "0183af359c43482d88dcdd3d0dd6e4a1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2022, 1, 30),
                            DogBreedId = "552d3f9cfd5c413884a0c827ba1f3d2b",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog3.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Luna",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "5b4d60721b664b32ac425fe131b29214",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 12, 5),
                            DogBreedId = "272ed288a22c4634b3df87347d436de3",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog4.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Charlie",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "157cd3db746548b1abfd918a7a673045",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 7, 18),
                            DogBreedId = "6091c9e41f494b34a171ca21602f16d8",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog5.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Max",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "d15ff7d2410a474e82aa624676abf84b",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 6, 10),
                            DogBreedId = "02f0710451de472cb3765cae550e3983",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog6.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Daisy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "4defa4d820a444a688feae61b6b55222",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2018, 11, 25),
                            DogBreedId = "8c26eec9201f48eda89b368373553ef2",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog7.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Buddy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "1aaeb3072f4c4f7ca9a231e206064a24",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 9, 14),
                            DogBreedId = "87f6188d4c844bea9f06fa4d888e62dc",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog8.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rex",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "94e47c4ac085487490eb8f45c13d2bb6",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 3, 8),
                            DogBreedId = "8de3c0542b3c44ddbfe7785aa265d1be",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog9.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Zara",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("DogBreeds");

                    b.HasData(
                        new
                        {
                            Id = "34bd0db5cfea403e87a893e5d0bbdebb",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A tiny breed known for its lively personality.",
                            DogTypeId = "db92a74d1bca4738afa4d775b7f57aa4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Chihuahua",
                            Status = 1
                        },
                        new
                        {
                            Id = "949c8566c6ed43a39663b92651ad281c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A fluffy and energetic small breed.",
                            DogTypeId = "db92a74d1bca4738afa4d775b7f57aa4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Pomeranian",
                            Status = 1
                        },
                        new
                        {
                            Id = "552d3f9cfd5c413884a0c827ba1f3d2b",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A small, muscular dog with a distinctive bat-like ear shape.",
                            DogTypeId = "db92a74d1bca4738afa4d775b7f57aa4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "French Bulldog",
                            Status = 1
                        },
                        new
                        {
                            Id = "272ed288a22c4634b3df87347d436de3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent medium-sized breed.",
                            DogTypeId = "addef8a118ea4285ab68a26583ba089a",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Cocker Spaniel",
                            Status = 1
                        },
                        new
                        {
                            Id = "6091c9e41f494b34a171ca21602f16d8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A highly intelligent and energetic breed.",
                            DogTypeId = "addef8a118ea4285ab68a26583ba089a",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Border Collie",
                            Status = 1
                        },
                        new
                        {
                            Id = "02f0710451de472cb3765cae550e3983",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A curious and friendly breed known for its great sense of smell.",
                            DogTypeId = "addef8a118ea4285ab68a26583ba089a",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Beagle",
                            Status = 1
                        },
                        new
                        {
                            Id = "8c26eec9201f48eda89b368373553ef2",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent large breed.",
                            DogTypeId = "3e742350d1a342bb98abb9afd02a33aa",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Golden Retriever",
                            Status = 1
                        },
                        new
                        {
                            Id = "87f6188d4c844bea9f06fa4d888e62dc",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A strong and intelligent breed used in working roles.",
                            DogTypeId = "3e742350d1a342bb98abb9afd02a33aa",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "German Shepherd",
                            Status = 1
                        },
                        new
                        {
                            Id = "8de3c0542b3c44ddbfe7785aa265d1be",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A loyal and protective breed, often used as a guard dog.",
                            DogTypeId = "3e742350d1a342bb98abb9afd02a33aa",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rottweiler",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("DogId");

                    b.ToTable("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogDocumentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DogDocumentTypeId");

                    b.HasIndex("DogId");

                    b.ToTable("DogDocuments");

                    b.HasData(
                        new
                        {
                            Id = "5fcb313c83de40cc879818b11aad329e",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Annual vaccination record for Bella.",
                            DogDocumentTypeId = "e02e01be87904edb8f7bf12f0e27f1f8",
                            DogId = "f989df546cbb4e1fabe8367d9a659cae",
                            ImageUrl = "https://example.com/documents/vaccination1.jpg",
                            IssueDate = new DateOnly(2023, 1, 10),
                            IssuingAuthority = "City Veterinary Clinic",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Vaccination Record",
                            Status = 1,
                            UploadTime = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "977aa6d96b4742218f918aa49467e225",
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Pedigree certificate for Rocky.",
                            DogDocumentTypeId = "43227c23455d4aa9b75365a286bfe69d",
                            DogId = "0999ddb2e73648faa29d16f33eea5ed0",
                            ImageUrl = "https://example.com/documents/pedigree1.jpg",
                            IssueDate = new DateOnly(2020, 9, 1),
                            IssuingAuthority = "National Kennel Club",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Pedigree Certificate",
                            Status = 1,
                            UploadTime = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "f9bad4d5d4ab402cb6c94cc0c187f7ce",
                            CreatedTime = new DateTimeOffset(new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Microchip registration for Luna.",
                            DogDocumentTypeId = "672850dfe45540239e3388c162e7acfc",
                            DogId = "0183af359c43482d88dcdd3d0dd6e4a1",
                            ImageUrl = "https://example.com/documents/microchip1.jpg",
                            IssueDate = new DateOnly(2022, 2, 15),
                            IssuingAuthority = "Pet Identification Bureau",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Microchip Registration",
                            Status = 1,
                            UploadTime = new DateTime(2022, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "a5574170b3a8489189b62c2745d9ec7e",
                            CreatedTime = new DateTimeOffset(new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Basic obedience training certificate for Charlie.",
                            DogDocumentTypeId = "9980d1a6d6154434a0fc350ba65c67ba",
                            DogId = "5b4d60721b664b32ac425fe131b29214",
                            ImageUrl = "https://example.com/documents/training1.jpg",
                            IssueDate = new DateOnly(2021, 3, 20),
                            IssuingAuthority = "Pawsitive Training Center",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Certificate",
                            Status = 1,
                            UploadTime = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "c95204e5d06949cdbb6f850bef38e8f4",
                            CreatedTime = new DateTimeOffset(new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Health insurance policy for Max.",
                            DogDocumentTypeId = "36042241238d4a6b94c54df1ae2ef062",
                            DogId = "157cd3db746548b1abfd918a7a673045",
                            ImageUrl = "https://example.com/documents/insurance1.jpg",
                            IssueDate = new DateOnly(2021, 8, 5),
                            IssuingAuthority = "PetCare Insurance",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Health Insurance",
                            Status = 1,
                            UploadTime = new DateTime(2021, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7cac972c97df45109dd417c519ff8b31",
                            CreatedTime = new DateTimeOffset(new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Adoption papers for Daisy.",
                            DogDocumentTypeId = "a05880b2a6ac4c7793da54d913fc3a7e",
                            DogId = "d15ff7d2410a474e82aa624676abf84b",
                            ImageUrl = "https://example.com/documents/adoption1.jpg",
                            IssueDate = new DateOnly(2020, 7, 12),
                            IssuingAuthority = "Happy Tails Shelter",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Adoption Papers",
                            Status = 1,
                            UploadTime = new DateTime(2020, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "9ac48bd67bb541f08e3b1a80310610e4",
                            CreatedTime = new DateTimeOffset(new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Certificate for winning Best in Show.",
                            DogDocumentTypeId = "795780ea162c40b79b99e23ad09fd215",
                            DogId = "4defa4d820a444a688feae61b6b55222",
                            ImageUrl = "https://example.com/documents/show1.jpg",
                            IssueDate = new DateOnly(2019, 12, 1),
                            IssuingAuthority = "National Dog Show Association",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Show Competition Certificate",
                            Status = 1,
                            UploadTime = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "7a6f520c6ca7425989bfe67521e201b0",
                            CreatedTime = new DateTimeOffset(new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Breeding license for Rex.",
                            DogDocumentTypeId = "637c85ce08c34549840ef782c720c284",
                            DogId = "1aaeb3072f4c4f7ca9a231e206064a24",
                            ImageUrl = "https://example.com/documents/breeding1.jpg",
                            IssueDate = new DateOnly(2019, 10, 1),
                            IssuingAuthority = "State Breeding Authority",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Breeding License",
                            Status = 1,
                            UploadTime = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "493412ceae9c427b96cb1c745993e515",
                            CreatedTime = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Therapy dog certification for Zara.",
                            DogDocumentTypeId = "59ed6370b7a44e5f81af14d983e0f884",
                            DogId = "94e47c4ac085487490eb8f45c13d2bb6",
                            ImageUrl = "https://example.com/documents/therapy1.jpg",
                            IssueDate = new DateOnly(2021, 4, 1),
                            IssuingAuthority = "Therapy Dogs International",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Therapy Dog Certification",
                            Status = 1,
                            UploadTime = new DateTime(2021, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogDocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = "e02e01be87904edb8f7bf12f0e27f1f8",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Document containing vaccination history of the dog.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Vaccination Record"
                        },
                        new
                        {
                            Id = "43227c23455d4aa9b75365a286bfe69d",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Official document proving the dog's lineage and breed.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Pedigree Certificate"
                        },
                        new
                        {
                            Id = "672850dfe45540239e3388c162e7acfc",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Document containing the dog's microchip details.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Microchip Registration"
                        },
                        new
                        {
                            Id = "9980d1a6d6154434a0fc350ba65c67ba",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Certificate proving the dog has completed a training program.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Certificate"
                        },
                        new
                        {
                            Id = "36042241238d4a6b94c54df1ae2ef062",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Document detailing the dog's health insurance policy.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Health Insurance"
                        },
                        new
                        {
                            Id = "a05880b2a6ac4c7793da54d913fc3a7e",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Legal documents for the adoption of the dog.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Adoption Papers"
                        },
                        new
                        {
                            Id = "795780ea162c40b79b99e23ad09fd215",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Certificate awarded for participation or winning in dog shows.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Show Competition Certificate"
                        },
                        new
                        {
                            Id = "637c85ce08c34549840ef782c720c284",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Official license permitting the dog to be used for breeding.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Breeding License"
                        },
                        new
                        {
                            Id = "59ed6370b7a44e5f81af14d983e0f884",
                            CreatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Certification proving the dog is qualified as a therapy dog.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Therapy Dog Certification"
                        });
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DogId");

                    b.ToTable("DogOwnerships");

                    b.HasData(
                        new
                        {
                            Id = "7e95d146314f4343971c921e975310de",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "30f3752615534f3e981932ebb53ab285",
                            DogId = "f989df546cbb4e1fabe8367d9a659cae",
                            FromDate = new DateOnly(2023, 1, 1),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "56b699bc77ad4b5785fb315c56163203",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "30f3752615534f3e981932ebb53ab285",
                            DogId = "0999ddb2e73648faa29d16f33eea5ed0",
                            FromDate = new DateOnly(2023, 3, 15),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "3e337193aeb54a9187c22b0167d3bf69",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "0183af359c43482d88dcdd3d0dd6e4a1",
                            FromDate = new DateOnly(2022, 6, 10),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "241f99dd8ec94e2f8e53c21a2c92fc04",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "5b4d60721b664b32ac425fe131b29214",
                            FromDate = new DateOnly(2021, 9, 5),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "e44a2de4b6a64952b636bc814cc5a430",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "157cd3db746548b1abfd918a7a673045",
                            FromDate = new DateOnly(2020, 4, 20),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "56e0b0c6ea8841c29c19ec88b56d94b0",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "d15ff7d2410a474e82aa624676abf84b",
                            FromDate = new DateOnly(2022, 8, 12),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "71d886766e114de5863784105996097f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "4defa4d820a444a688feae61b6b55222",
                            FromDate = new DateOnly(2023, 2, 14),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "68ae3e0c7581425d8bd5d42bd188d4d4",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "1aaeb3072f4c4f7ca9a231e206064a24",
                            FromDate = new DateOnly(2023, 5, 7),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "fabf98509ec049629a2925f73ab15350",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ac432bd246a74fb7ae3dd585c39144e8",
                            DogId = "94e47c4ac085487490eb8f45c13d2bb6",
                            FromDate = new DateOnly(2023, 7, 22),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DogTypes");

                    b.HasData(
                        new
                        {
                            Id = "db92a74d1bca4738afa4d775b7f57aa4",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Small-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Small",
                            Status = 1
                        },
                        new
                        {
                            Id = "addef8a118ea4285ab68a26583ba089a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Medium-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Medium",
                            Status = 1
                        },
                        new
                        {
                            Id = "3e742350d1a342bb98abb9afd02a33aa",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Large-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Large",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("RequiedNightStay")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCategoryId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = "0ac25f7855a84585bdeeb01d7400bca8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A clicker used for positive reinforcement training.",
                            EquipmentCategoryId = "bf589e7df3a249f3b48bd24ce401060a",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Clicker",
                            Status = 1
                        },
                        new
                        {
                            Id = "ba83ad9675c14e6db41ef5f4b24c2662",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A comfortable harness designed for safety and control.",
                            EquipmentCategoryId = "d2881608c36e4f93b0e29f70ccc1d2d4",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Dog Harness",
                            Status = 1
                        },
                        new
                        {
                            Id = "fd569aae2040492a8d4a718b2bf36617",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A brush for maintaining a dog's coat and hygiene.",
                            EquipmentCategoryId = "ce7dda743e294b2dbfa8d7470f177bba",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Brush",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EquipmentCategories");

                    b.HasData(
                        new
                        {
                            Id = "bf589e7df3a249f3b48bd24ce401060a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Equipment used for dog training and obedience exercises.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Tools",
                            Status = 1
                        },
                        new
                        {
                            Id = "d2881608c36e4f93b0e29f70ccc1d2d4",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Protective gear for dogs, such as harnesses and pads.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Safety Gear",
                            Status = 1
                        },
                        new
                        {
                            Id = "ce7dda743e294b2dbfa8d7470f177bba",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tools used for dog grooming, including brushes and clippers.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Equipment",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LegalDocuments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "0383b1b8c4da4aeda3b15448582963a7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Entry-level membership",
                            DiscountAmount = 0m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            RequiredPoints = 0
                        },
                        new
                        {
                            Id = "ae18a4fb2c874fd78b217d9c6e019512",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Premium membership",
                            DiscountAmount = 10m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Gold",
                            RequiredPoints = 500
                        },
                        new
                        {
                            Id = "951ec72a63904816857bef8747ba8738",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Elite membership",
                            DiscountAmount = 20m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Platinum",
                            RequiredPoints = 1000
                        });
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnrollmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.ToTable("PreTests");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PrerequisiteCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId")
                        .IsUnique();

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PerformanceObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "f6f66051635d4be1ae994afca1664b33",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "System administrator with full access",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = "4aca89ad500a4ccf88fc387fb3203eba",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Member",
                            Status = 1
                        },
                        new
                        {
                            Id = "9546c4a031e54038b1c0a1e91828db5c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Lead trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Lead",
                            Status = 1
                        },
                        new
                        {
                            Id = "db16396ac6b14e19aa314ed1bab402c8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Individual customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Individual",
                            Status = 1
                        },
                        new
                        {
                            Id = "961f548e2f214205b0ff0ab6028921ea",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Organizational customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Organizational",
                            Status = 1
                        },
                        new
                        {
                            Id = "7a9d724be0744dadbb70ee173af51278",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff employee member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Employee",
                            Status = 1
                        },
                        new
                        {
                            Id = "e404ea5e9e534b48b0bd2b4802c6af3a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff manager member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Manager",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = "d1d426a922d74ff8a31936f9e905b3b7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs to follow basic commands like sit, stay, and come.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Commands",
                            Status = 1
                        },
                        new
                        {
                            Id = "da58f9f2cba2492682029425c56a3c10",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Enhancing a dog's physical abilities and responsiveness through obstacle courses.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "eb7c17ab658c4851bbc7bc584b113a7c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addressing and correcting unwanted behaviors in dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Correction",
                            Status = 1
                        },
                        new
                        {
                            Id = "ce8597792f5e4dcb9bf2ea0f5a957f9a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs become comfortable around other animals and people.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Socialization",
                            Status = 1
                        },
                        new
                        {
                            Id = "fc1626207ed94d8380072bf67a74e6fc",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for guarding and protective behavior.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Protection Training",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = "506458d889064ab7934ee797d267feb3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Basic and advanced obedience training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Obedience Training"
                        },
                        new
                        {
                            Id = "26d8ec7cca444e87b07a246a551f7a6e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs overcome behavioral issues.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Therapy"
                        },
                        new
                        {
                            Id = "30eea12e080642998e0d031950eba20d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for agility courses and competitions.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training"
                        });
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TrainerRoleId");

                    b.ToTable("TrainerProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerReports");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainerRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSkills");

                    b.HasData(
                        new
                        {
                            Id = "8aa10fca785a42e4ad3a2de94fcb75c3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "d1d426a922d74ff8a31936f9e905b3b7",
                            TrainerId = "2c5a23e6584e4129bae285cb63694681"
                        },
                        new
                        {
                            Id = "33434df2df6e44dba9b5812d1edf7c92",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "da58f9f2cba2492682029425c56a3c10",
                            TrainerId = "2c5a23e6584e4129bae285cb63694681"
                        },
                        new
                        {
                            Id = "71789a6d0c654a97903fda83d63f967f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "eb7c17ab658c4851bbc7bc584b113a7c",
                            TrainerId = "2c5a23e6584e4129bae285cb63694681"
                        },
                        new
                        {
                            Id = "eff871c7638c48bf9dce7deb665842b7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "d1d426a922d74ff8a31936f9e905b3b7",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        },
                        new
                        {
                            Id = "9472d104654f4a7496f653d79c2688d1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "da58f9f2cba2492682029425c56a3c10",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        },
                        new
                        {
                            Id = "ab2a8c7e5f6f49bdbef83225dde084cb",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "eb7c17ab658c4851bbc7bc584b113a7c",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        },
                        new
                        {
                            Id = "5ef7fbf6376146aa829b8d142f1ef9e0",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "ce8597792f5e4dcb9bf2ea0f5a957f9a",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        },
                        new
                        {
                            Id = "3f5219d9d9044960aa6c53517fc2f864",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "fc1626207ed94d8380072bf67a74e6fc",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpecializaionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializaionId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSpecializations");

                    b.HasData(
                        new
                        {
                            Id = "596c9c79035c4b7db0a5e256a391f3f8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "506458d889064ab7934ee797d267feb3",
                            TrainerId = "2c5a23e6584e4129bae285cb63694681"
                        },
                        new
                        {
                            Id = "35fa00965885417f8856f3e737d8cde7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "26d8ec7cca444e87b07a246a551f7a6e",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        },
                        new
                        {
                            Id = "1f62bf2fbc784409a57e6a4bbe5b81d1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "30eea12e080642998e0d031950eba20d",
                            TrainerId = "bfe42d83023840efa405572cf451ed6b"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReactionToCommands")
                        .HasColumnType("int");

                    b.Property<int>("Socialization")
                        .HasColumnType("int");

                    b.Property<int>("StressLevel")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany("AccountOtps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.HasOne("Models.Entities.Class", null)
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId");

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Attendances")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("Attendances")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Availabilities")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Availabilities")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Blogs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.HasOne("Models.Entities.CageCategory", "CageCategory")
                        .WithMany("Cages")
                        .HasForeignKey("CageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CageCategory");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("CageCategories")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("Models.Entities.Certificate", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Certifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "SenderAccount")
                        .WithMany("Chats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.HasOne("Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedTrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseDogs")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("CourseDogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("CourseLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.CustomerRole", null)
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("CustomerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("Dogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("DogBreeds")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany("DogCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogCertificates")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.HasOne("Models.Entities.DogDocumentType", "DogDocumentType")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("DogDocumentType");
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.HasOne("Models.Entities.Cage", "Cage")
                        .WithMany("Enrollments")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Enrollments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Payment", "Payment")
                        .WithOne("Enrollment")
                        .HasForeignKey("Models.Entities.Enrollment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Enrollments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cage");

                    b.Navigation("Class");

                    b.Navigation("Dog");

                    b.Navigation("Payment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.HasOne("Models.Entities.EquipmentCategory", "EquipmentCategory")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("LegalDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("Lessons")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.HasOne("Models.Entities.Equipment", "Equipment")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.HasOne("Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Membership");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("PreTests")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("PreTests")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Course", "PrerequisiteCourse")
                        .WithOne()
                        .HasForeignKey("Models.Entities.Prerequisite", "PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.HasOne("Models.Entities.Attendance", "Attendance")
                        .WithMany("ProgressReports")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("ProgressReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lesson");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.StaffRole", null)
                        .WithMany("StaffProfiles")
                        .HasForeignKey("StaffRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.TrainerRole", null)
                        .WithMany("TrainerProfiles")
                        .HasForeignKey("TrainerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("TrainerReportsAsCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerReportsAsTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.HasOne("Models.Entities.Specialization", "Specialization")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("SpecializaionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.HasOne("Models.Entities.Dog", null)
                        .WithMany("TrainingReports")
                        .HasForeignKey("DogId");

                    b.HasOne("Models.Entities.Enrollment", "Enrollment")
                        .WithMany("TrainingReports")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainingReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("WishLists")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("WishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Navigation("AccountOtps");

                    b.Navigation("Availabilities");

                    b.Navigation("Blogs");

                    b.Navigation("Certifications");

                    b.Navigation("Chats");

                    b.Navigation("Courses");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("LegalDocuments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("ProgressReports");

                    b.Navigation("TrainerAssignments");

                    b.Navigation("TrainerReportsAsCustomer");

                    b.Navigation("TrainerReportsAsTrainer");

                    b.Navigation("TrainerSkills");

                    b.Navigation("TrainerSpecializations");

                    b.Navigation("TrainingReports");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Navigation("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Navigation("Cages");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Navigation("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("Slots");

                    b.Navigation("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("CourseDogs");

                    b.Navigation("CourseLessons");

                    b.Navigation("Prerequisites");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Navigation("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("DogCertificates");

                    b.Navigation("DogDocuments");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Navigation("CourseDogs");

                    b.Navigation("Dogs");
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Navigation("DogDocuments");
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Navigation("CageCategories");

                    b.Navigation("DogBreeds");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Navigation("Enrollment")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Navigation("TrainerSpecializations");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Navigation("TrainerProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
