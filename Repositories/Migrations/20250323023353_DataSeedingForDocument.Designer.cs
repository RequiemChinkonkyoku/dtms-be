// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DtmsDbContext))]
    [Migration("20250323023353_DataSeedingForDocument")]
    partial class DataSeedingForDocument
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MembershipPoints")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "3787a33421be4310ac5eb1ab8d697fbf",
                            Address = "Admin Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 710, DateTimeKind.Unspecified).AddTicks(1370), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin User",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 710, DateTimeKind.Unspecified).AddTicks(1370), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 0,
                            Password = "$2a$11$HwTI5kdpct7P/CPMX9eM6.p1bZ3w69zOx0DNhUOTal6/EAUjMGIMG",
                            PhoneNumber = "0123456789",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "afe7f0fbabd04cddbd77b2c78dcfeff0",
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = "bc0f6d9bf7b2463a85358014070e5f59",
                            Address = "Trainer Member Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 828, DateTimeKind.Unspecified).AddTicks(687), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_member@gmail.com",
                            FullName = "Trainer Member",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 828, DateTimeKind.Unspecified).AddTicks(687), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 0,
                            Password = "$2a$11$GaWBiodHe5q0yImvlhIlT.SL48upF/nGunTSEAV3KFMisfK2jWZ7e",
                            PhoneNumber = "0987654321",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "ee741db0d7294aceaa9c361dab1a253a",
                            Status = 1,
                            Username = "trainer_member"
                        },
                        new
                        {
                            Id = "23c1a3c8753d4d349a4b378c5dfe99a5",
                            Address = "Trainer Lead Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 942, DateTimeKind.Unspecified).AddTicks(1310), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1983, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_lead@gmail.com",
                            FullName = "Trainer Lead",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 51, 942, DateTimeKind.Unspecified).AddTicks(1310), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 0,
                            Password = "$2a$11$8ruAIahZunr19n5U9rtvFeqmrYS6L33tyZ7x/w8iGgcNFTwB8mHdi",
                            PhoneNumber = "0911223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "e507e39010454782b947a9850e903471",
                            Status = 1,
                            Username = "trainer_lead"
                        },
                        new
                        {
                            Id = "df71c939b0c74cb697080ae7055f11c5",
                            Address = "Customer Individual Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 55, DateTimeKind.Unspecified).AddTicks(4426), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1995, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_individual@gmail.com",
                            FullName = "Customer Individual",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 55, DateTimeKind.Unspecified).AddTicks(4426), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 100,
                            Password = "$2a$11$BbN4pDUHjhQFn46H0TWVZe5.BFITi9dBDUggAf5BqeisgAoIAFw7C",
                            PhoneNumber = "0988112233",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "a364df780be740ae9c2e4f4d8c1bcf06",
                            Status = 1,
                            Username = "customer_individual"
                        },
                        new
                        {
                            Id = "a19fbb199fb74103a17e0c97fe3a894c",
                            Address = "Customer Organization Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 167, DateTimeKind.Unspecified).AddTicks(8396), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1992, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_organization@gmail.com",
                            FullName = "Customer Organization",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 167, DateTimeKind.Unspecified).AddTicks(8396), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 200,
                            Password = "$2a$11$619WAX.dpkYLj/3rMu9AVObHXb3rcMD4QCLyksHrusZLsdwYarsLO",
                            PhoneNumber = "0977554433",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "03912efa2c7f4586bb32b6b8dfdc9826",
                            Status = 1,
                            Username = "customer_organization"
                        },
                        new
                        {
                            Id = "90794052e3144171b73a2205c9d37809",
                            Address = "Staff Employee Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 281, DateTimeKind.Unspecified).AddTicks(7715), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1988, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_employee@gmail.com",
                            FullName = "Staff Employee",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 281, DateTimeKind.Unspecified).AddTicks(7715), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 0,
                            Password = "$2a$11$dXrKcJAQLuLJbRpSllIfQuRhFe6ecrmTy8xEluAW5RqRhbPwnvCaq",
                            PhoneNumber = "0966332211",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "830225e9ca4541419b82c76e5ce670b7",
                            Status = 1,
                            Username = "staff_employee"
                        },
                        new
                        {
                            Id = "35f3ac27b17a4295a337b78341807c6a",
                            Address = "Staff Manager Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 395, DateTimeKind.Unspecified).AddTicks(9368), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_manager@gmail.com",
                            FullName = "Staff Manager",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 9, 33, 52, 395, DateTimeKind.Unspecified).AddTicks(9368), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "28f472bccf5544d29d47ce5223797e21",
                            MembershipPoints = 0,
                            Password = "$2a$11$wbAW2cxQ9kDtCyu2ucKituCHyuWMe.6Hp.WH3K2XeSrLVRWvv5mmK",
                            PhoneNumber = "0955223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "1005e54c31f249ef8a7337d77f92f06a",
                            Status = 1,
                            Username = "staff_manager"
                        });
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpiredOrUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountOtps");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("SlotId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = "04c25f4cb1624ea0aafc44c6a9365928",
                            Content = "Training your dog is crucial for a harmonious relationship between pet and owner...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "90794052e3144171b73a2205c9d37809",
                            Status = 1,
                            TimePublished = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Importance of Dog Training"
                        },
                        new
                        {
                            Id = "3f4a2c0104c04b3597e38efa8c1a2696",
                            Content = "Providing a balanced diet is essential for your dog's overall health and well-being...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "35f3ac27b17a4295a337b78341807c6a",
                            Status = 1,
                            TimePublished = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Understanding Canine Nutrition"
                        });
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageCategoryId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("CageCategories");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "8d3e15f1cba34bb188544eafa1e8f952",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Covers fundamental obedience commands and essential skills.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "e534e655f8d2443fa3c68f26bac2033b",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Focuses on advanced obedience and specialized training techniques.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Advanced Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "d40034d06b7e4f7db33aa7f7655b546e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addresses problem behaviors and corrective training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Modification",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssignedTrainerCount")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EnrolledDogCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartingDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedTrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxDogs")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrainers")
                        .HasColumnType("int");

                    b.Property<int>("MinDogs")
                        .HasColumnType("int");

                    b.Property<int>("MinTrainers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlotsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedTrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DogBreedId");

                    b.ToTable("CourseDogs");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseLessons");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerRoles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogBreedId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            Id = "1f66a91d3eb14e27972d3350e646cf6d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 5, 15),
                            DogBreedId = "2a9762d7af614a918e5b50763c809239",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Bella",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "9665cff6ccae4e0fada2e86eaa910b09",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 8, 22),
                            DogBreedId = "1c49ea971f3245d6be2fc57d9d00fdd1",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rocky",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "0bd12e7dc4f1437da140a6dc2dc926ad",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2022, 1, 30),
                            DogBreedId = "ab040de66f1742e784c44b6e77bdd558",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog3.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Luna",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "905a6529c2d44595be248663218a16f1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 12, 5),
                            DogBreedId = "c923f4c2b5d84fdca3661053041ae7ca",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog4.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Charlie",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "0a31e68c8ab948598db829119ad303d1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 7, 18),
                            DogBreedId = "a8ebf8995f394dd2b8b06e73f926df53",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog5.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Max",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "00583a64b6564f95afb24fd3ced987b5",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 6, 10),
                            DogBreedId = "62084d91e2a34062bd47fac8f60d91bd",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog6.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Daisy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "696499b846d0486da5d4c4c209610b67",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2018, 11, 25),
                            DogBreedId = "b851fac40d1c4befbce78af9cb997b66",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog7.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Buddy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "2541af20051a47db88eed1e7b8d10e68",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 9, 14),
                            DogBreedId = "6d57c21e4e664bea97c3ac7822b4b178",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog8.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rex",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "68f21d1bbd9a40a5980c57ad0d8cbbba",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 3, 8),
                            DogBreedId = "5104d9a7ee484d1e9deeaa5c4ee8ab7f",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog9.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Zara",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("DogBreeds");

                    b.HasData(
                        new
                        {
                            Id = "2a9762d7af614a918e5b50763c809239",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A tiny breed known for its lively personality.",
                            DogTypeId = "fe95dc1803a945a68a16368ee20bb11c",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Chihuahua",
                            Status = 1
                        },
                        new
                        {
                            Id = "1c49ea971f3245d6be2fc57d9d00fdd1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A fluffy and energetic small breed.",
                            DogTypeId = "fe95dc1803a945a68a16368ee20bb11c",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Pomeranian",
                            Status = 1
                        },
                        new
                        {
                            Id = "ab040de66f1742e784c44b6e77bdd558",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A small, muscular dog with a distinctive bat-like ear shape.",
                            DogTypeId = "fe95dc1803a945a68a16368ee20bb11c",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "French Bulldog",
                            Status = 1
                        },
                        new
                        {
                            Id = "c923f4c2b5d84fdca3661053041ae7ca",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent medium-sized breed.",
                            DogTypeId = "e4d84a1b04564b1eac93686da5ed3891",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Cocker Spaniel",
                            Status = 1
                        },
                        new
                        {
                            Id = "a8ebf8995f394dd2b8b06e73f926df53",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A highly intelligent and energetic breed.",
                            DogTypeId = "e4d84a1b04564b1eac93686da5ed3891",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Border Collie",
                            Status = 1
                        },
                        new
                        {
                            Id = "62084d91e2a34062bd47fac8f60d91bd",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A curious and friendly breed known for its great sense of smell.",
                            DogTypeId = "e4d84a1b04564b1eac93686da5ed3891",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Beagle",
                            Status = 1
                        },
                        new
                        {
                            Id = "b851fac40d1c4befbce78af9cb997b66",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent large breed.",
                            DogTypeId = "38e4bde4713b44c7857c238faee8b17e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Golden Retriever",
                            Status = 1
                        },
                        new
                        {
                            Id = "6d57c21e4e664bea97c3ac7822b4b178",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A strong and intelligent breed used in working roles.",
                            DogTypeId = "38e4bde4713b44c7857c238faee8b17e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "German Shepherd",
                            Status = 1
                        },
                        new
                        {
                            Id = "5104d9a7ee484d1e9deeaa5c4ee8ab7f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A loyal and protective breed, often used as a guard dog.",
                            DogTypeId = "38e4bde4713b44c7857c238faee8b17e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rottweiler",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("DogId");

                    b.ToTable("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogDocumentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DogDocumentTypeId");

                    b.HasIndex("DogId");

                    b.ToTable("DogDocuments");
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogDocumentTypes");
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DogId");

                    b.ToTable("DogOwnerships");

                    b.HasData(
                        new
                        {
                            Id = "cf6ccf22594c46e68c57fe9e89265701",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "df71c939b0c74cb697080ae7055f11c5",
                            DogId = "1f66a91d3eb14e27972d3350e646cf6d",
                            FromDate = new DateOnly(2023, 1, 1),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "3f601a06f0a04c36af1f03fab23e101c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "df71c939b0c74cb697080ae7055f11c5",
                            DogId = "9665cff6ccae4e0fada2e86eaa910b09",
                            FromDate = new DateOnly(2023, 3, 15),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "504ec6afd9194a5c9ddaf8966284b746",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "0bd12e7dc4f1437da140a6dc2dc926ad",
                            FromDate = new DateOnly(2022, 6, 10),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "a92c1e88095c46e6b86a8a7aee30e082",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "905a6529c2d44595be248663218a16f1",
                            FromDate = new DateOnly(2021, 9, 5),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "5a13747de125445d9cd25b32f2cf58fc",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "0a31e68c8ab948598db829119ad303d1",
                            FromDate = new DateOnly(2020, 4, 20),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "d27695d982dc4e4ea58d0d63d80cf47a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "00583a64b6564f95afb24fd3ced987b5",
                            FromDate = new DateOnly(2022, 8, 12),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "6874018864024f8c909fe45381dcd87e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "696499b846d0486da5d4c4c209610b67",
                            FromDate = new DateOnly(2023, 2, 14),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "0229c2aa42c64c7ea2aeb1ac843f9be1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "2541af20051a47db88eed1e7b8d10e68",
                            FromDate = new DateOnly(2023, 5, 7),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "23d497dfcbca46b3a6d8d824b763e5b1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "a19fbb199fb74103a17e0c97fe3a894c",
                            DogId = "68f21d1bbd9a40a5980c57ad0d8cbbba",
                            FromDate = new DateOnly(2023, 7, 22),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DogTypes");

                    b.HasData(
                        new
                        {
                            Id = "fe95dc1803a945a68a16368ee20bb11c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Small-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Small",
                            Status = 1
                        },
                        new
                        {
                            Id = "e4d84a1b04564b1eac93686da5ed3891",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Medium-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Medium",
                            Status = 1
                        },
                        new
                        {
                            Id = "38e4bde4713b44c7857c238faee8b17e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Large-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Large",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("RequiedNightStay")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCategoryId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = "675195344e184af1af53cdefa0f3dc57",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A clicker used for positive reinforcement training.",
                            EquipmentCategoryId = "0da87b4d397c4b5cb74b3ab186c8b985",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Clicker",
                            Status = 1
                        },
                        new
                        {
                            Id = "cd9fce55230047c3963a78ed10c070ec",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A comfortable harness designed for safety and control.",
                            EquipmentCategoryId = "95078837cecb4bc3b11acfcb18c57bdf",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Dog Harness",
                            Status = 1
                        },
                        new
                        {
                            Id = "4eae38eb3ef04506918fb96278de3668",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A brush for maintaining a dog's coat and hygiene.",
                            EquipmentCategoryId = "505bc7e58be54b72b1634084772bed35",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Brush",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EquipmentCategories");

                    b.HasData(
                        new
                        {
                            Id = "0da87b4d397c4b5cb74b3ab186c8b985",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Equipment used for dog training and obedience exercises.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Tools",
                            Status = 1
                        },
                        new
                        {
                            Id = "95078837cecb4bc3b11acfcb18c57bdf",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Protective gear for dogs, such as harnesses and pads.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Safety Gear",
                            Status = 1
                        },
                        new
                        {
                            Id = "505bc7e58be54b72b1634084772bed35",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tools used for dog grooming, including brushes and clippers.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Equipment",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LegalDocuments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "28f472bccf5544d29d47ce5223797e21",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Entry-level membership",
                            DiscountAmount = 0m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            RequiredPoints = 0
                        },
                        new
                        {
                            Id = "01d9059a2bae4ffe949d5b6d79bab8f8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Premium membership",
                            DiscountAmount = 10m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Gold",
                            RequiredPoints = 500
                        },
                        new
                        {
                            Id = "85ab8cfa4658442abd31fd66da960d4d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Elite membership",
                            DiscountAmount = 20m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Platinum",
                            RequiredPoints = 1000
                        });
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnrollmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.ToTable("PreTests");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PrerequisiteCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId")
                        .IsUnique();

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PerformanceObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "afe7f0fbabd04cddbd77b2c78dcfeff0",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "System administrator with full access",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = "ee741db0d7294aceaa9c361dab1a253a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Member",
                            Status = 1
                        },
                        new
                        {
                            Id = "e507e39010454782b947a9850e903471",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Lead trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Lead",
                            Status = 1
                        },
                        new
                        {
                            Id = "a364df780be740ae9c2e4f4d8c1bcf06",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Individual customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Individual",
                            Status = 1
                        },
                        new
                        {
                            Id = "03912efa2c7f4586bb32b6b8dfdc9826",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Organizational customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Organizational",
                            Status = 1
                        },
                        new
                        {
                            Id = "830225e9ca4541419b82c76e5ce670b7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff employee member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Employee",
                            Status = 1
                        },
                        new
                        {
                            Id = "1005e54c31f249ef8a7337d77f92f06a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff manager member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Manager",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = "5127126e02684789bace61adc31d270d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs to follow basic commands like sit, stay, and come.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Commands",
                            Status = 1
                        },
                        new
                        {
                            Id = "56e479f7881b4baf840c69db1dc69154",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Enhancing a dog's physical abilities and responsiveness through obstacle courses.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "24aee1f8ad8d4d76b6ab9898e1733b57",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addressing and correcting unwanted behaviors in dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Correction",
                            Status = 1
                        },
                        new
                        {
                            Id = "fc6c1be2372d4622bdd131ae1bc86a55",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs become comfortable around other animals and people.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Socialization",
                            Status = 1
                        },
                        new
                        {
                            Id = "bee87c802fb84f749ee1b9544177ca6f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for guarding and protective behavior.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Protection Training",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = "558b3f6bd6144abfb2fa642635050d21",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Basic and advanced obedience training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Obedience Training"
                        },
                        new
                        {
                            Id = "4016bc5d36bb44f3a0ce8c56d8863441",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs overcome behavioral issues.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Therapy"
                        },
                        new
                        {
                            Id = "8e5070597a5f4069967fb4dc1d696237",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for agility courses and competitions.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training"
                        });
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TrainerRoleId");

                    b.ToTable("TrainerProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerReports");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainerRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSkills");

                    b.HasData(
                        new
                        {
                            Id = "efa763e682cb48c4b27165daa0572e90",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "5127126e02684789bace61adc31d270d",
                            TrainerId = "bc0f6d9bf7b2463a85358014070e5f59"
                        },
                        new
                        {
                            Id = "2939c154e9f04317b41248388b6f2d21",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "56e479f7881b4baf840c69db1dc69154",
                            TrainerId = "bc0f6d9bf7b2463a85358014070e5f59"
                        },
                        new
                        {
                            Id = "d60a806fb9bc4112834c8917749b50b7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "24aee1f8ad8d4d76b6ab9898e1733b57",
                            TrainerId = "bc0f6d9bf7b2463a85358014070e5f59"
                        },
                        new
                        {
                            Id = "e73852d373db4d7eb40866e2993d5c8c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "5127126e02684789bace61adc31d270d",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        },
                        new
                        {
                            Id = "d7ddee2e36ea4bb7b6aa6b8913f1f8b5",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "56e479f7881b4baf840c69db1dc69154",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        },
                        new
                        {
                            Id = "b3833e55495a4049996dfc28820f593a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "24aee1f8ad8d4d76b6ab9898e1733b57",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        },
                        new
                        {
                            Id = "d71d21f23e174c93913ff2ae52451bac",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "fc6c1be2372d4622bdd131ae1bc86a55",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        },
                        new
                        {
                            Id = "d35873e224854ce3bed0012cfe8e5fca",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "bee87c802fb84f749ee1b9544177ca6f",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpecializaionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializaionId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSpecializations");

                    b.HasData(
                        new
                        {
                            Id = "e4c7d6640d4143e6b787eeed51ba8d6c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "558b3f6bd6144abfb2fa642635050d21",
                            TrainerId = "bc0f6d9bf7b2463a85358014070e5f59"
                        },
                        new
                        {
                            Id = "1dd776d4784a461c820505b0dca0a17d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "4016bc5d36bb44f3a0ce8c56d8863441",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        },
                        new
                        {
                            Id = "0582a92730a7447e8306867c8229aaa2",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "8e5070597a5f4069967fb4dc1d696237",
                            TrainerId = "23c1a3c8753d4d349a4b378c5dfe99a5"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReactionToCommands")
                        .HasColumnType("int");

                    b.Property<int>("Socialization")
                        .HasColumnType("int");

                    b.Property<int>("StressLevel")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany("AccountOtps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.HasOne("Models.Entities.Class", null)
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId");

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Attendances")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("Attendances")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Availabilities")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Availabilities")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Blogs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.HasOne("Models.Entities.CageCategory", "CageCategory")
                        .WithMany("Cages")
                        .HasForeignKey("CageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CageCategory");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("CageCategories")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("Models.Entities.Certificate", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Certifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "SenderAccount")
                        .WithMany("Chats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.HasOne("Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedTrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseDogs")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("CourseDogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("CourseLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.CustomerRole", null)
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("CustomerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("Dogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("DogBreeds")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany("DogCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogCertificates")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.HasOne("Models.Entities.DogDocumentType", "DogDocumentType")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("DogDocumentType");
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.HasOne("Models.Entities.Cage", "Cage")
                        .WithMany("Enrollments")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Enrollments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Payment", "Payment")
                        .WithOne("Enrollment")
                        .HasForeignKey("Models.Entities.Enrollment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Enrollments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cage");

                    b.Navigation("Class");

                    b.Navigation("Dog");

                    b.Navigation("Payment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.HasOne("Models.Entities.EquipmentCategory", "EquipmentCategory")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("LegalDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("Lessons")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.HasOne("Models.Entities.Equipment", "Equipment")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.HasOne("Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Membership");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("PreTests")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("PreTests")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Course", "PrerequisiteCourse")
                        .WithOne()
                        .HasForeignKey("Models.Entities.Prerequisite", "PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.HasOne("Models.Entities.Attendance", "Attendance")
                        .WithMany("ProgressReports")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("ProgressReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lesson");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.StaffRole", null)
                        .WithMany("StaffProfiles")
                        .HasForeignKey("StaffRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.TrainerRole", null)
                        .WithMany("TrainerProfiles")
                        .HasForeignKey("TrainerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("TrainerReportsAsCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerReportsAsTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.HasOne("Models.Entities.Specialization", "Specialization")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("SpecializaionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.HasOne("Models.Entities.Dog", null)
                        .WithMany("TrainingReports")
                        .HasForeignKey("DogId");

                    b.HasOne("Models.Entities.Enrollment", "Enrollment")
                        .WithMany("TrainingReports")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainingReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("WishLists")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("WishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Navigation("AccountOtps");

                    b.Navigation("Availabilities");

                    b.Navigation("Blogs");

                    b.Navigation("Certifications");

                    b.Navigation("Chats");

                    b.Navigation("Courses");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("LegalDocuments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("ProgressReports");

                    b.Navigation("TrainerAssignments");

                    b.Navigation("TrainerReportsAsCustomer");

                    b.Navigation("TrainerReportsAsTrainer");

                    b.Navigation("TrainerSkills");

                    b.Navigation("TrainerSpecializations");

                    b.Navigation("TrainingReports");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Navigation("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Navigation("Cages");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Navigation("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("Slots");

                    b.Navigation("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("CourseDogs");

                    b.Navigation("CourseLessons");

                    b.Navigation("Prerequisites");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Navigation("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("DogCertificates");

                    b.Navigation("DogDocuments");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Navigation("CourseDogs");

                    b.Navigation("Dogs");
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Navigation("DogDocuments");
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Navigation("CageCategories");

                    b.Navigation("DogBreeds");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Navigation("Enrollment")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Navigation("TrainerSpecializations");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Navigation("TrainerProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
