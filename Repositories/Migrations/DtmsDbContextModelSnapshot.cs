// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace Repositories.Migrations
{
    [DbContext(typeof(DtmsDbContext))]
    partial class DtmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MembershipPoints")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = "6144c9fe6b7e4f4294ea469ffb6a90fd",
                            Address = "Admin Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 620, DateTimeKind.Unspecified).AddTicks(1197), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin User",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 620, DateTimeKind.Unspecified).AddTicks(1197), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 0,
                            Password = "$2a$11$m1IMbmUlxt/g9T3kyhT2hO6Wkemqx8uA1mpak5Yl9Vmu9qbMsy8m2",
                            PhoneNumber = "0123456789",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "0131f2e255b44b969cf5273cde7c3465",
                            Status = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = "54d3a3e95adc4b38885e43af50e12e42",
                            Address = "Trainer Member Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 765, DateTimeKind.Unspecified).AddTicks(7474), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_member@gmail.com",
                            FullName = "Trainer Member",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 765, DateTimeKind.Unspecified).AddTicks(7474), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 0,
                            Password = "$2a$11$G0MhnmWlChfwRsw9xAPWzOTKvaxJ22J8iKwu9AGDSGm9Pmejl2ErK",
                            PhoneNumber = "0987654321",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "d76e3c6efa1042ada3847521b61f847f",
                            Status = 1,
                            Username = "trainer_member"
                        },
                        new
                        {
                            Id = "fa13bc18b0c54ba0b9886b007f4d8b08",
                            Address = "Trainer Lead Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 904, DateTimeKind.Unspecified).AddTicks(3463), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1983, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "trainer_lead@gmail.com",
                            FullName = "Trainer Lead",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 41, 904, DateTimeKind.Unspecified).AddTicks(3463), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 0,
                            Password = "$2a$11$0/pfd/mARoMOwxMNmtKljefgc6qei0bos1.WuU/Kjf0Dh3oKxz8oC",
                            PhoneNumber = "0911223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "30969e33920647e98d7389c719407ae4",
                            Status = 1,
                            Username = "trainer_lead"
                        },
                        new
                        {
                            Id = "ea46ce4e457f42dfb18b6347bd4ea1f4",
                            Address = "Customer Individual Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 49, DateTimeKind.Unspecified).AddTicks(7348), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1995, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_individual@gmail.com",
                            FullName = "Customer Individual",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 49, DateTimeKind.Unspecified).AddTicks(7348), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 100,
                            Password = "$2a$11$CI7wNVkoPee7GoZ.6i/sU.AIXirqrlE1JDY4CpvFqsY.uwQwCNArm",
                            PhoneNumber = "0988112233",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "dd17f217736e46f6ab93912f4d4bbe76",
                            Status = 1,
                            Username = "customer_individual"
                        },
                        new
                        {
                            Id = "2bf1c6f4a7db4fed825958e6d78e7226",
                            Address = "Customer Organization Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 195, DateTimeKind.Unspecified).AddTicks(3918), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1992, 3, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "customer_organization@gmail.com",
                            FullName = "Customer Organization",
                            Gender = 2,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 195, DateTimeKind.Unspecified).AddTicks(3918), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 200,
                            Password = "$2a$11$8/JW7ul9Q5XmM8KTizh6N.IeOOJzgBRqQmGP2Z9vt7VlY2Z1NPTzC",
                            PhoneNumber = "0977554433",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "56652ade5adf4ed38d50895ca39ce580",
                            Status = 1,
                            Username = "customer_organization"
                        },
                        new
                        {
                            Id = "00786efb729542fa87a19d44fb3cdf79",
                            Address = "Staff Employee Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 345, DateTimeKind.Unspecified).AddTicks(389), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1988, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_employee@gmail.com",
                            FullName = "Staff Employee",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 345, DateTimeKind.Unspecified).AddTicks(389), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 0,
                            Password = "$2a$11$/jyOMfFh/pZYAUsAGga6Legt1/49dqg34YfYfZjEDBcAU.KDpClMa",
                            PhoneNumber = "0966332211",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "db4733fad3a941f4971aa0fec24be2b1",
                            Status = 1,
                            Username = "staff_employee"
                        },
                        new
                        {
                            Id = "eaa27cff0c91479087bb22370ffbb6d0",
                            Address = "Staff Manager Address",
                            CreatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 488, DateTimeKind.Unspecified).AddTicks(3179), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff_manager@gmail.com",
                            FullName = "Staff Manager",
                            Gender = 1,
                            ImageUrl = "empty",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2025, 3, 23, 2, 7, 42, 488, DateTimeKind.Unspecified).AddTicks(3179), new TimeSpan(0, 7, 0, 0, 0)),
                            MembershipId = "8012856c6cc045cea011acf51b60227d",
                            MembershipPoints = 0,
                            Password = "$2a$11$4YNs63B7rHpslhbQPptxAehjnUXNLN/c0B4okVwhmqTksiCiYdp3O",
                            PhoneNumber = "0955223344",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = "8a59b78d40b3477795e0c286b6ea5d41",
                            Status = 1,
                            Username = "staff_manager"
                        });
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpiredOrUsed")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountOtps");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SlotId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("SlotId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePublished")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = "57f1808014f741c79e2791dea717d760",
                            Content = "Training your dog is crucial for a harmonious relationship between pet and owner...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "00786efb729542fa87a19d44fb3cdf79",
                            Status = 1,
                            TimePublished = new DateTime(2024, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Importance of Dog Training"
                        },
                        new
                        {
                            Id = "fc97a573f1224b93b73ddce3eebd4095",
                            Content = "Providing a balanced diet is essential for your dog's overall health and well-being...",
                            CreatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            ImageUrl = "https://example.com/blog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            StaffId = "eaa27cff0c91479087bb22370ffbb6d0",
                            Status = 1,
                            TimePublished = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Understanding Canine Nutrition"
                        });
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageCategoryId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("CageCategories");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "156552f4dc9942b5bc72a6bae94be821",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Covers fundamental obedience commands and essential skills.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "f8cb65025770497e9a61c75501ed6cd3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Focuses on advanced obedience and specialized training techniques.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Advanced Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "c44beb29575744b68c42cf4f70274a20",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addresses problem behaviors and corrective training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Modification",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TrainerId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AssignedTrainerCount")
                        .HasColumnType("int");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EnrolledDogCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartingDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedTrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DaysPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInWeeks")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxDogs")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrainers")
                        .HasColumnType("int");

                    b.Property<int>("MinDogs")
                        .HasColumnType("int");

                    b.Property<int>("MinTrainers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SlotsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedTrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DogBreedId");

                    b.ToTable("CourseDogs");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseLessons");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CustomerRoles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DogBreedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogBreedId");

                    b.ToTable("Dogs");

                    b.HasData(
                        new
                        {
                            Id = "bbf004a7a5c24d1b989bc7110a5c56c3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 5, 15),
                            DogBreedId = "d60d3e9afb724ec0b36dc52d3bb6bd64",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog1.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Bella",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "fe7077791778468984040eeec2ae731e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 8, 22),
                            DogBreedId = "aab0b6e304af466d955a035fb1316c94",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog2.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rocky",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "2ea60c66720d4571833911be746470a8",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2022, 1, 30),
                            DogBreedId = "c128c6bdc5e0416c81578b5523f897ff",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog3.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Luna",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "8487615b64754cc2be8401202ffad21e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 12, 5),
                            DogBreedId = "4bee6ab4f7f841d69bacedcfd25c8d07",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog4.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Charlie",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "e28448d9b78a4098a300783838d4bc15",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 7, 18),
                            DogBreedId = "f8c917e1e56f41389122c5c8dfa869c3",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog5.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Max",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "4e763c98bfd940168bfcc8bbcaa36f92",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2020, 6, 10),
                            DogBreedId = "7afb0c3a253c4f52b2c9c197ee316db1",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog6.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Daisy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "468c7f90cef546d1a336b133ce986031",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2018, 11, 25),
                            DogBreedId = "ad463f17bd7746d9b6831e97d865fa1d",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog7.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Buddy",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "dc8c01d14f87485e910eb153d90d432c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2019, 9, 14),
                            DogBreedId = "d49ed755a16b482aa894e52d8c976bde",
                            Gender = 1,
                            ImageUrl = "https://example.com/dog8.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rex",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        },
                        new
                        {
                            Id = "f153eb7f29934c30908c68fc668e01d7",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            DateOfBirth = new DateOnly(2021, 3, 8),
                            DogBreedId = "57e3821db9464da1a52b20c1bc33d68e",
                            Gender = 0,
                            ImageUrl = "https://example.com/dog9.jpg",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Zara",
                            RegistrationTime = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogTypeId");

                    b.ToTable("DogBreeds");

                    b.HasData(
                        new
                        {
                            Id = "d60d3e9afb724ec0b36dc52d3bb6bd64",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A tiny breed known for its lively personality.",
                            DogTypeId = "7ca915fdd76440358e4c7890a8835f2e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Chihuahua",
                            Status = 1
                        },
                        new
                        {
                            Id = "aab0b6e304af466d955a035fb1316c94",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A fluffy and energetic small breed.",
                            DogTypeId = "7ca915fdd76440358e4c7890a8835f2e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Pomeranian",
                            Status = 1
                        },
                        new
                        {
                            Id = "c128c6bdc5e0416c81578b5523f897ff",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A small, muscular dog with a distinctive bat-like ear shape.",
                            DogTypeId = "7ca915fdd76440358e4c7890a8835f2e",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "French Bulldog",
                            Status = 1
                        },
                        new
                        {
                            Id = "4bee6ab4f7f841d69bacedcfd25c8d07",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent medium-sized breed.",
                            DogTypeId = "165bb59ab7a54afbbce7f87a59e4e59f",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Cocker Spaniel",
                            Status = 1
                        },
                        new
                        {
                            Id = "f8c917e1e56f41389122c5c8dfa869c3",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A highly intelligent and energetic breed.",
                            DogTypeId = "165bb59ab7a54afbbce7f87a59e4e59f",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Border Collie",
                            Status = 1
                        },
                        new
                        {
                            Id = "7afb0c3a253c4f52b2c9c197ee316db1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A curious and friendly breed known for its great sense of smell.",
                            DogTypeId = "165bb59ab7a54afbbce7f87a59e4e59f",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Beagle",
                            Status = 1
                        },
                        new
                        {
                            Id = "ad463f17bd7746d9b6831e97d865fa1d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A friendly and intelligent large breed.",
                            DogTypeId = "290085959b894fd9a5862aaa212c7dad",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Golden Retriever",
                            Status = 1
                        },
                        new
                        {
                            Id = "d49ed755a16b482aa894e52d8c976bde",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A strong and intelligent breed used in working roles.",
                            DogTypeId = "290085959b894fd9a5862aaa212c7dad",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "German Shepherd",
                            Status = 1
                        },
                        new
                        {
                            Id = "57e3821db9464da1a52b20c1bc33d68e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A loyal and protective breed, often used as a guard dog.",
                            DogTypeId = "290085959b894fd9a5862aaa212c7dad",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Rottweiler",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("DogId");

                    b.ToTable("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DogDocumentTypeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("IssuingAuthority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DogDocumentTypeId");

                    b.HasIndex("DogId");

                    b.ToTable("DogDocuments");
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DogDocumentTypes");
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("FromDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DogId");

                    b.ToTable("DogOwnerships");

                    b.HasData(
                        new
                        {
                            Id = "a738f67c534e41a58f4e000832a032cb",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ea46ce4e457f42dfb18b6347bd4ea1f4",
                            DogId = "bbf004a7a5c24d1b989bc7110a5c56c3",
                            FromDate = new DateOnly(2023, 1, 1),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "6952cd89ec7f4861aed0b7c80004652c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "ea46ce4e457f42dfb18b6347bd4ea1f4",
                            DogId = "fe7077791778468984040eeec2ae731e",
                            FromDate = new DateOnly(2023, 3, 15),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "ddbd5f8e4c9340dc8ebfaab25deac181",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "2ea60c66720d4571833911be746470a8",
                            FromDate = new DateOnly(2022, 6, 10),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "f0d54ea2b94b4f8bb70b2c2d02bea6ef",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "8487615b64754cc2be8401202ffad21e",
                            FromDate = new DateOnly(2021, 9, 5),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "34bf2da66c1c438fb6ea023988f607db",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "e28448d9b78a4098a300783838d4bc15",
                            FromDate = new DateOnly(2020, 4, 20),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "13ddd89665b249bc99c01b290c5fb596",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "4e763c98bfd940168bfcc8bbcaa36f92",
                            FromDate = new DateOnly(2022, 8, 12),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "f30e6700a29e4bad89738697ebc1cdca",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "468c7f90cef546d1a336b133ce986031",
                            FromDate = new DateOnly(2023, 2, 14),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "d0222688ae5242b49d5003246f4b241a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "dc8c01d14f87485e910eb153d90d432c",
                            FromDate = new DateOnly(2023, 5, 7),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            Id = "cbfaa4b1ee324f78a215263b0a89d5df",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            CustomerId = "2bf1c6f4a7db4fed825958e6d78e7226",
                            DogId = "f153eb7f29934c30908c68fc668e01d7",
                            FromDate = new DateOnly(2023, 7, 22),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DogTypes");

                    b.HasData(
                        new
                        {
                            Id = "7ca915fdd76440358e4c7890a8835f2e",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Small-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Small",
                            Status = 1
                        },
                        new
                        {
                            Id = "165bb59ab7a54afbbce7f87a59e4e59f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Medium-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Medium",
                            Status = 1
                        },
                        new
                        {
                            Id = "290085959b894fd9a5862aaa212c7dad",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Large-sized dog breeds",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Large",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CageId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("RequiedNightStay")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentCategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentCategoryId");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = "8360514335034d07a43a34455ce8a238",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A clicker used for positive reinforcement training.",
                            EquipmentCategoryId = "8d3d09a5a8404aca9c0f391ba12cec69",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Clicker",
                            Status = 1
                        },
                        new
                        {
                            Id = "26a6940dc1de411bac923654991eb90d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A comfortable harness designed for safety and control.",
                            EquipmentCategoryId = "c5aaa8d1e97445718662ff6193441c28",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Dog Harness",
                            Status = 1
                        },
                        new
                        {
                            Id = "2c736d4396d0403483651149e8a28262",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "A brush for maintaining a dog's coat and hygiene.",
                            EquipmentCategoryId = "ff877ca6f800408fb7001989c050f9b1",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Brush",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EquipmentCategories");

                    b.HasData(
                        new
                        {
                            Id = "8d3d09a5a8404aca9c0f391ba12cec69",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Equipment used for dog training and obedience exercises.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Training Tools",
                            Status = 1
                        },
                        new
                        {
                            Id = "c5aaa8d1e97445718662ff6193441c28",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Protective gear for dogs, such as harnesses and pads.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Safety Gear",
                            Status = 1
                        },
                        new
                        {
                            Id = "ff877ca6f800408fb7001989c050f9b1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Tools used for dog grooming, including brushes and clippers.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Grooming Equipment",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("LegalDocuments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequiredPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "8012856c6cc045cea011acf51b60227d",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Entry-level membership",
                            DiscountAmount = 0m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic",
                            RequiredPoints = 0
                        },
                        new
                        {
                            Id = "eb43a56a202a44ae8fd0ebdb958e8b09",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Premium membership",
                            DiscountAmount = 10m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Gold",
                            RequiredPoints = 500
                        },
                        new
                        {
                            Id = "6a93bc9850404efa9dcd405db6b63579",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Elite membership",
                            DiscountAmount = 20m,
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Platinum",
                            RequiredPoints = 1000
                        });
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AmountDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EnrollmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MembershipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MembershipId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("TestDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DogId");

                    b.ToTable("PreTests");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PrerequisiteCourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("PrerequisiteCourseId")
                        .IsUnique();

                    b.ToTable("Prerequisites");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttendanceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HealthObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PerformanceObservation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "0131f2e255b44b969cf5273cde7c3465",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "System administrator with full access",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Admin",
                            Status = 1
                        },
                        new
                        {
                            Id = "d76e3c6efa1042ada3847521b61f847f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Member",
                            Status = 1
                        },
                        new
                        {
                            Id = "30969e33920647e98d7389c719407ae4",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Lead trainer responsible for courses and lessons",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Trainer_Lead",
                            Status = 1
                        },
                        new
                        {
                            Id = "dd17f217736e46f6ab93912f4d4bbe76",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Individual customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Individual",
                            Status = 1
                        },
                        new
                        {
                            Id = "56652ade5adf4ed38d50895ca39ce580",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Organizational customer who can enroll in courses",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Customer_Organizational",
                            Status = 1
                        },
                        new
                        {
                            Id = "db4733fad3a941f4971aa0fec24be2b1",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff employee member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Employee",
                            Status = 1
                        },
                        new
                        {
                            Id = "8a59b78d40b3477795e0c286b6ea5d41",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Staff manager member managing operations",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Staff_Manager",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = "69369f008c4b4b8e8213209c4b234352",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs to follow basic commands like sit, stay, and come.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Basic Commands",
                            Status = 1
                        },
                        new
                        {
                            Id = "2a1563fde6094ac5a12c45d5c09ca68a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Enhancing a dog's physical abilities and responsiveness through obstacle courses.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training",
                            Status = 1
                        },
                        new
                        {
                            Id = "932de1bffd1f4c31a9cb483721623a69",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Addressing and correcting unwanted behaviors in dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Correction",
                            Status = 1
                        },
                        new
                        {
                            Id = "c384db4b131e468d8b551a3488130d6f",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs become comfortable around other animals and people.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Socialization",
                            Status = 1
                        },
                        new
                        {
                            Id = "f69d7033c2cb46a2b5289b24c80dc59a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for guarding and protective behavior.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Protection Training",
                            Status = 1
                        });
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LessonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = "bb199304ef9e47b787a3f5fbd5e49515",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Basic and advanced obedience training for dogs.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Obedience Training"
                        },
                        new
                        {
                            Id = "096afda693f24285b2c3358214bac8a9",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Helping dogs overcome behavioral issues.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Behavioral Therapy"
                        },
                        new
                        {
                            Id = "7fe4b583c3854e79ac6e5ea0e28549d9",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Description = "Training dogs for agility courses and competitions.",
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Agility Training"
                        });
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StaffRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StaffRoleId");

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaffRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("DateOfHire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("EmploymentType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TrainerRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TrainerRoleId");

                    b.ToTable("TrainerProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerReports");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TrainerRoles");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SkillId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSkills");

                    b.HasData(
                        new
                        {
                            Id = "95006cb2706e40a88ffc6442cc726f5a",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "69369f008c4b4b8e8213209c4b234352",
                            TrainerId = "54d3a3e95adc4b38885e43af50e12e42"
                        },
                        new
                        {
                            Id = "4a526fcfd23b49138cd6cd6542b8ee19",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "2a1563fde6094ac5a12c45d5c09ca68a",
                            TrainerId = "54d3a3e95adc4b38885e43af50e12e42"
                        },
                        new
                        {
                            Id = "cfa197bf60154ac5ba1aa610e0969cb9",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "932de1bffd1f4c31a9cb483721623a69",
                            TrainerId = "54d3a3e95adc4b38885e43af50e12e42"
                        },
                        new
                        {
                            Id = "80f4108f20594220a14ced11a970da83",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "69369f008c4b4b8e8213209c4b234352",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        },
                        new
                        {
                            Id = "07cd73db65c14f00b62b2989dd01bcfa",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "2a1563fde6094ac5a12c45d5c09ca68a",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        },
                        new
                        {
                            Id = "ac25363902ad4ee28e4e72d74dad4962",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "932de1bffd1f4c31a9cb483721623a69",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        },
                        new
                        {
                            Id = "9ffc2d246d5c442499a672b89090b5ca",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "c384db4b131e468d8b551a3488130d6f",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        },
                        new
                        {
                            Id = "3cc36201c3e449669b2e84044da18359",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SkillId = "f69d7033c2cb46a2b5289b24c80dc59a",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("SpecializaionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializaionId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSpecializations");

                    b.HasData(
                        new
                        {
                            Id = "6072538bcfd647a794dc6e0bba50c2cd",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "bb199304ef9e47b787a3f5fbd5e49515",
                            TrainerId = "54d3a3e95adc4b38885e43af50e12e42"
                        },
                        new
                        {
                            Id = "68b1786bfa3a4863a3185f2e56b0e44c",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "096afda693f24285b2c3358214bac8a9",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        },
                        new
                        {
                            Id = "1057b0502a944acaaf493ae342d7c253",
                            CreatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            LastUpdatedTime = new DateTimeOffset(new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            SpecializaionId = "7fe4b583c3854e79ac6e5ea0e28549d9",
                            TrainerId = "fa13bc18b0c54ba0b9886b007f4d8b08"
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BehaviorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DogId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnrollmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReactionToCommands")
                        .HasColumnType("int");

                    b.Property<int>("Socialization")
                        .HasColumnType("int");

                    b.Property<int>("StressLevel")
                        .HasColumnType("int");

                    b.Property<string>("TrainerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DogId");

                    b.HasIndex("EnrollmentId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CustomerId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany("Accounts")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Entities.AccountOtp", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany("AccountOtps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.HasOne("Models.Entities.Class", null)
                        .WithMany("Attendances")
                        .HasForeignKey("ClassId");

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Attendances")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("Attendances")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Models.Entities.Availability", b =>
                {
                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Availabilities")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Availabilities")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Blog", b =>
                {
                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Blogs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.HasOne("Models.Entities.CageCategory", "CageCategory")
                        .WithMany("Cages")
                        .HasForeignKey("CageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CageCategory");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("CageCategories")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithOne("Certificate")
                        .HasForeignKey("Models.Entities.Certificate", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Certifications", b =>
                {
                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Certifications")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Chat", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "SenderAccount")
                        .WithMany("Chats")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");

                    b.Navigation("SenderAccount");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.HasOne("Models.Entities.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("CreatedTrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.CourseDog", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseDogs")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("CourseDogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.CourseLesson", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("CourseLessons")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.CustomerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.CustomerRole", null)
                        .WithMany("CustomerProfiles")
                        .HasForeignKey("CustomerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.HasOne("Models.Entities.DogBreed", "DogBreed")
                        .WithMany("Dogs")
                        .HasForeignKey("DogBreedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DogBreed");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.HasOne("Models.Entities.DogType", "DogType")
                        .WithMany("DogBreeds")
                        .HasForeignKey("DogTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DogType");
                });

            modelBuilder.Entity("Models.Entities.DogCertificate", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany("DogCertificates")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogCertificates")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.DogDocument", b =>
                {
                    b.HasOne("Models.Entities.DogDocumentType", "DogDocumentType")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogDocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogDocuments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dog");

                    b.Navigation("DogDocumentType");
                });

            modelBuilder.Entity("Models.Entities.DogOwnership", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("DogOwnerships")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.HasOne("Models.Entities.Cage", "Cage")
                        .WithMany("Enrollments")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("Enrollments")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Payment", "Payment")
                        .WithOne("Enrollment")
                        .HasForeignKey("Models.Entities.Enrollment", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Staff")
                        .WithMany("Enrollments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cage");

                    b.Navigation("Class");

                    b.Navigation("Dog");

                    b.Navigation("Payment");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.HasOne("Models.Entities.EquipmentCategory", "EquipmentCategory")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EquipmentCategory");
                });

            modelBuilder.Entity("Models.Entities.LegalDocument", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("LegalDocuments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("Lessons")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Models.Entities.LessonEquipment", b =>
                {
                    b.HasOne("Models.Entities.Equipment", "Equipment")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany("LessonEquipments")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Models.Entities.Notification", b =>
                {
                    b.HasOne("Models.Entities.Account", "ReceiverAccount")
                        .WithMany("Notifications")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ReceiverAccount");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Membership", "Membership")
                        .WithMany()
                        .HasForeignKey("MembershipId");

                    b.HasOne("Models.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Membership");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Models.Entities.PreTest", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("PreTests")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Dog", "Dog")
                        .WithMany("PreTests")
                        .HasForeignKey("DogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Dog");
                });

            modelBuilder.Entity("Models.Entities.Prerequisite", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("Prerequisites")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Course", "PrerequisiteCourse")
                        .WithOne()
                        .HasForeignKey("Models.Entities.Prerequisite", "PrerequisiteCourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("PrerequisiteCourse");
                });

            modelBuilder.Entity("Models.Entities.ProgressReport", b =>
                {
                    b.HasOne("Models.Entities.Attendance", "Attendance")
                        .WithMany("ProgressReports")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("ProgressReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("Models.Entities.Schedule", "Schedule")
                        .WithMany("Slots")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Lesson");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Models.Entities.StaffProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.StaffRole", null)
                        .WithMany("StaffProfiles")
                        .HasForeignKey("StaffRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerAssignment", b =>
                {
                    b.HasOne("Models.Entities.Class", "Class")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerAssignments")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerProfile", b =>
                {
                    b.HasOne("Models.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.TrainerRole", null)
                        .WithMany("TrainerProfiles")
                        .HasForeignKey("TrainerRoleId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Models.Entities.TrainerReport", b =>
                {
                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("TrainerReportsAsCustomer")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerReportsAsTrainer")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSpecialization", b =>
                {
                    b.HasOne("Models.Entities.Specialization", "Specialization")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("SpecializaionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainerSpecializations")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainingReport", b =>
                {
                    b.HasOne("Models.Entities.Dog", null)
                        .WithMany("TrainingReports")
                        .HasForeignKey("DogId");

                    b.HasOne("Models.Entities.Enrollment", "Enrollment")
                        .WithMany("TrainingReports")
                        .HasForeignKey("EnrollmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Models.Entities.Account", "Trainer")
                        .WithMany("TrainingReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Enrollment");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.WishList", b =>
                {
                    b.HasOne("Models.Entities.Course", "Course")
                        .WithMany("WishLists")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Entities.Account", "Customer")
                        .WithMany("WishLists")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Account", b =>
                {
                    b.Navigation("AccountOtps");

                    b.Navigation("Availabilities");

                    b.Navigation("Blogs");

                    b.Navigation("Certifications");

                    b.Navigation("Chats");

                    b.Navigation("Courses");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("LegalDocuments");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("ProgressReports");

                    b.Navigation("TrainerAssignments");

                    b.Navigation("TrainerReportsAsCustomer");

                    b.Navigation("TrainerReportsAsTrainer");

                    b.Navigation("TrainerSkills");

                    b.Navigation("TrainerSpecializations");

                    b.Navigation("TrainingReports");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.Attendance", b =>
                {
                    b.Navigation("ProgressReports");
                });

            modelBuilder.Entity("Models.Entities.Cage", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Models.Entities.CageCategory", b =>
                {
                    b.Navigation("Cages");
                });

            modelBuilder.Entity("Models.Entities.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Navigation("DogCertificates");
                });

            modelBuilder.Entity("Models.Entities.Class", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("Slots");

                    b.Navigation("TrainerAssignments");
                });

            modelBuilder.Entity("Models.Entities.Course", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("CourseDogs");

                    b.Navigation("CourseLessons");

                    b.Navigation("Prerequisites");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Models.Entities.CustomerRole", b =>
                {
                    b.Navigation("CustomerProfiles");
                });

            modelBuilder.Entity("Models.Entities.Dog", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("DogCertificates");

                    b.Navigation("DogDocuments");

                    b.Navigation("DogOwnerships");

                    b.Navigation("Enrollments");

                    b.Navigation("PreTests");

                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.DogBreed", b =>
                {
                    b.Navigation("CourseDogs");

                    b.Navigation("Dogs");
                });

            modelBuilder.Entity("Models.Entities.DogDocumentType", b =>
                {
                    b.Navigation("DogDocuments");
                });

            modelBuilder.Entity("Models.Entities.DogType", b =>
                {
                    b.Navigation("CageCategories");

                    b.Navigation("DogBreeds");
                });

            modelBuilder.Entity("Models.Entities.Enrollment", b =>
                {
                    b.Navigation("TrainingReports");
                });

            modelBuilder.Entity("Models.Entities.Equipment", b =>
                {
                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.EquipmentCategory", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Navigation("CourseLessons");

                    b.Navigation("LessonEquipments");
                });

            modelBuilder.Entity("Models.Entities.Membership", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Payment", b =>
                {
                    b.Navigation("Enrollment")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Models.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Models.Entities.Schedule", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("Models.Entities.Specialization", b =>
                {
                    b.Navigation("TrainerSpecializations");
                });

            modelBuilder.Entity("Models.Entities.StaffRole", b =>
                {
                    b.Navigation("StaffProfiles");
                });

            modelBuilder.Entity("Models.Entities.TrainerRole", b =>
                {
                    b.Navigation("TrainerProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
